plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.9.6'
}

group 'org.qa-guru.practices'
version '1.0'

repositories {
    mavenCentral()
}

def allureVersion = "2.17.3",
    junitVersion = "5.8.2",
    selenideVersion = "6.4.0",
    restAssured = "5.0.1",
    slf4jVersion = "1.7.32"

allure {
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
    report {
        version.set(allureVersion)
    }
}

dependencies {
    // Selenide
    testImplementation("com.codeborne:selenide:$selenideVersion")
    testRuntimeOnly("org.slf4j:slf4j-simple:$slf4jVersion")

    // Selenoid file download
    testImplementation("org.selenide:selenide-selenoid:2.2.1")

    // JUnit 5
    testImplementation("org.junit.jupiter:junit-jupiter:$junitVersion")

    // Allure
    testImplementation("io.qameta.allure:allure-selenide:$allureVersion")

    // Owner
    testImplementation("org.aeonbits.owner:owner:1.0.12")

    // Rest Assured
    testImplementation("io.rest-assured:rest-assured:$restAssured")

    // Asserts
    testImplementation('org.assertj:assertj-core:3.22.0')

    // Files Utils
    testImplementation("com.fasterxml.jackson.core:jackson-core:2.13.1")
    testImplementation('com.codeborne:pdf-test:1.7.0')
    testImplementation('com.codeborne:xls-test:1.4.0')
    testImplementation('com.opencsv:opencsv:5.6')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task e2e_test(type: Test) {
    useJUnitPlatform {
        includeTags "E2E"
    }
}

task smoke_test(type: Test) {
    useJUnitPlatform {
        includeTags "Smoke"
    }
}

task allure_notifi_test(type: Test) {
    useJUnitPlatform {
        includeTags "allure_notifi_test"
    }
}